from sly import Lexer
from sly import Parser

class BasicParser(Parser):
    tokens = BasicLexer.tokens

    presedence = (
        ('left', '+', '-'),
        ('left', '*', '/'),
        ('right', 'UMINUS'),
        )
    
    def _init_(self):
        self.env = { }
    
    @_('')
    def statementO(self, p):
        pass

    @_('FOR var_assign TO expr THEN statement')
    def statement(self, p):
        #self.names[p.NAME] = p.expr
        return ('for_loop', ('for_loop_setup', p.var_assign, p.expr), p.statement)
    
    @_('IF condition THEN statement ELSE statement')
    def statement(self, p):
        #self.name[p.NAME] = p.expr
        return ('if_stmt', p.condition, ('branch', p.statement0, p.statement1))

    @_('FUN NAME "(" ")" ARROW statement')
    def statement(self, p):
        #self.names[p.NAME] = p.expr
        return ('fun_def', p.NAME, p.statement)
    @_('NAME "(" ")"')
    def statement(self, p):
        return ('fun_call', p.NAME)

    @_('expr EQEQ expr')
    def condition(self, p):
        #self.names[p.NAME] = p.expr
        return ('condition_eqeq', p.expr0, p.expr1)

    @_('var_assign')
    def statement(self, p):
        return p.var_assign
    
    @_('NAME "=" STRING')
    def var_assign(self, p):
        return ('var_assign', p.NAME, p.STRING)
    
    @_('expr')
    def statement(self, p):
        return (p.expr)
    
    @_('expr "+" expr')
    def expr(self, p):
        return ('add', p.expr0, p.expr1)
    
    @_('expr "-" expr')
    def expr(self, p):
        return ('sub', p.expr0, p.expr1)

    @_('expr "*" expr')
    def expr(self, p):
        return ('mul', p.expr0, p.expr1)

    @_('expr "/" expr')
    def expr(self, p):
        return ('div', p.expr0, p.expr1)

    @_('"-" expr %prec UMINUS')
    def expr(self, p):
        #return -p.expr
        return p.expr
    
    @_('NAME')
    def expr(self, p):
        return ('var', p.NAME)
    
    @_('NUMBER')
    def expr(self, p):
        return ('num', p.NUMBER)
